{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/boot.js",
    "src/objects/DonutConstructor.js",
    "src/objects/animateSprite.js",
    "src/objects/chechMusic.js",
    "src/objects/createCustomButton.js",
    "src/objects/createCustomSprite.js",
    "src/states/GameOverState.js",
    "src/states/MainMenu.js",
    "src/states/PlayState.js",
    "src/states/Preloader.js",
    "src/states/TutorialState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import { MainMenu } from 'states/MainMenu';\r\nimport Preloader from './states/Preloader';\r\nimport TutorialState from './states/TutorialState';\r\nimport PlayState from './states/PlayState';\r\nimport GameOverState  from './states/GameOverState';\r\n\r\nclass Game extends Phaser.Game {\r\n\r\n\tconstructor() {\r\n\t\tsuper(614.4 , 750, Phaser.AUTO);\r\n\r\n\t\tthis.state.add('mainMenu', MainMenu, false);\r\n\t\tthis.state.add('preloader', Preloader, false);\r\n\t\tthis.state.add('tutorialState', TutorialState, false);\r\n\t\tthis.state.add('playState', PlayState, false);\r\n\t\tthis.state.add('gameOverState', GameOverState, false);\r\n\r\n\t\tthis.state.start('preloader');\r\n\t}\r\n\r\n}\r\n\r\nnew Game();\r\n",
    "class Donut {\r\n    constructor(height, width, index, sprite) {\r\n        this.height = height;\r\n        this.width = width;\r\n        this.sprite = sprite;  //sprite for this donut\r\n        this.index = index;  // 1 - 6\r\n    }\r\n}\r\n\r\nexport default Donut;\r\n",
    "export function animate(game, item, start, end, stopNumber = 0) {\r\n    if (stopNumber >= start - end) {\r\n        return 0;\r\n    }\r\n\r\n    setTimeout(() => {\r\n        item.x = start - stopNumber;\r\n\r\n        stopNumber += 3;\r\n\r\n        animate(game, item, start, end, stopNumber);\r\n    }, 1);\r\n}\r\n",
    "export function checkMusic(soundButton) {\r\n    if (window['music'].mute) {\r\n        soundButton.tint = 0xff0000;\r\n    } else {\r\n        soundButton.tint = 0xFFFFFF;\r\n    }\r\n}\r\n",
    "export function createCustomButton(game, x, y, image, width, height, cb) {\r\n    let button = game.add.button(x, y, image, cb, game);\r\n\r\n    button.width = width;\r\n    button.height = height;\r\n\r\n    return button;\r\n}",
    "export function createCustomSprite(game, x, y, image, width, height, ) {\r\n    let sprite = game.add.sprite(x, y, image);\r\n\r\n    sprite.width = width;\r\n    sprite.height = height;\r\n\r\n    return sprite;\r\n}\r\n",
    "import {createCustomButton} from '../objects/createCustomButton';\r\nimport {checkMusic} from \"../objects/chechMusic\";\r\nimport {createCustomSprite} from '../objects/createCustomSprite';\r\nimport {animate} from '../objects/animateSprite';\r\n\r\nclass GameOverState extends Phaser.State{\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let soundButton = createCustomButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        checkMusic(soundButton);\r\n\r\n        let timeUp = createCustomSprite(this, this.world.centerX + 500, this.world.centerY - 100, 'timeUp', 440, 100);\r\n        timeUp.anchor.setTo(0.5, 0.5);\r\n\r\n        animate(this, timeUp, this.world.centerX + 500, this.world.centerX);\r\n\r\n        let yourScore = this.add.text(this.world.centerX + 1000, this.world.centerY, `Your score: ${window['score']}`, {font: \"50px Fredoka One\", fill: \"red\"});\r\n        yourScore.anchor.setTo(0.5, 0.5);\r\n\r\n        animate(this, yourScore, this.world.centerX + 1000, this.world.centerX);\r\n\r\n        let returnBtn = createCustomButton(this, this.world.centerX + 1500, this.world.centerY + 100, 'returnToMainMenu', 230, 150, () => {\r\n            this.state.start('mainMenu');\r\n        });\r\n        returnBtn.anchor.setTo(0.5, 0.5);\r\n\r\n        animate(this, returnBtn, this.world.centerX + 1500, this.world.centerX);\r\n    }\r\n}\r\n\r\nexport default GameOverState;\r\n",
    "import {createCustomButton} from '../objects/createCustomButton';\r\nimport {checkMusic} from '../objects/chechMusic';\r\nimport {createCustomSprite} from '../objects/createCustomSprite';\r\nimport {animate} from '../objects/animateSprite';\r\n\r\nexport class MainMenu extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n        console.log('123');\r\n        let soundButton = createCustomButton(this, 900, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                soundButton.tint = 0xff0000;\r\n\r\n                window['music'].mute = true;\r\n            }\r\n        });\r\n\r\n        checkMusic(soundButton);\r\n\r\n        animate(this, soundButton, 900, 10);\r\n\r\n        let donutShadow = createCustomSprite(this, this.world.centerX + 35, this.world.centerY, 'donutShadow', 450, 450);\r\n        donutShadow.anchor.setTo(0.5, 0.5);\r\n\r\n        let donut = createCustomSprite(this,this.world.centerX, this.world.centerY, 'donut', 450, 450);\r\n        donut.anchor.setTo(0.5, 0.5);\r\n\r\n        let donutsLogo = createCustomSprite(this,this.world.centerX + 1050, this.world.centerY - 225, 'donutsLogo', 480, 170);\r\n        donutsLogo.anchor.setTo(0.5, 0.5);\r\n\r\n        animate(this, donutsLogo, this.world.centerX + 1050, this.world.centerX);\r\n\r\n        let playBtn = createCustomButton(this, this.world.centerX + 1150, this.world.centerY + 120, 'playBtn', 230, 150, () => {\r\n            this.state.start('playState');\r\n        });\r\n        playBtn.anchor.setTo(0.5, 0.5);\r\n\r\n        animate(this, playBtn, this.world.centerX + 1200, this.world.centerX);\r\n\r\n        let howToPlayBtn = createCustomButton(this, this.world.centerX + 1250, this.world.centerY + 280, 'howToPlayBtn', 210, 130, () => {\r\n            this.state.start('tutorialState');\r\n        });\r\n        howToPlayBtn.anchor.setTo(0.5, 0.5);\r\n\r\n        animate(this, howToPlayBtn, this.world.centerX + 1300, this.world.centerX);\r\n    }\r\n}\r\n",
    "import {createCustomButton} from '../objects/createCustomButton';\r\nimport Donut from '../objects/DonutConstructor';\r\nimport {checkMusic} from \"../objects/chechMusic\";\r\nimport {createCustomSprite} from '../objects/createCustomSprite';\r\n\r\nclass PlayState extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        this.destroySound = this.add.audio('destroyDonutsSound');\r\n        this.selectSound = this.add.audio('swapSound');\r\n\r\n        let startTimer = new Date();\r\n\r\n        this.timeToPlay = 45;\r\n        this.timeExpired = 0;\r\n\r\n        let timeLabel = this.add.text(500, 38, \"30\", {font: \"50px Fredoka One\", fill: \"red\"});\r\n\r\n        this.time.events.loop(100, () => {\r\n            let currentTime = new Date();\r\n\r\n            let timeDifference = startTimer.getTime() - currentTime.getTime();\r\n\r\n            this.timeExpired = Math.abs(timeDifference / 1000);\r\n\r\n            let timeRemaining = this.timeToPlay - this.timeExpired;\r\n\r\n            let seconds = Math.floor(timeRemaining) - (60 * Math.floor(timeRemaining / 60));\r\n\r\n            timeLabel.text = seconds;\r\n        });\r\n\r\n        let soundButton = createCustomButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        checkMusic(soundButton);\r\n\r\n        let scoreTable = createCustomSprite(this, this.world.centerX - 170, this.world.centerY - 380, 'scoreTable', 380, 150);\r\n\r\n        this.scoreText = this.add.text(this.world.centerX - 20, this.world.centerY - 351, '0', {\r\n            font: '58px Fredoka One',\r\n            fill: 'red'\r\n        });\r\n\r\n        window['score'] = 0;\r\n\r\n        this.donutWidth = this.cache.getImage('red-01').width;\r\n        this.donutHeight = this.cache.getImage('red-01').height;\r\n\r\n        this.indexes = {\r\n            1: 'red-01',\r\n            2: 'blue-02',\r\n            3: 'green-03',\r\n            4: 'lightBlue-04',\r\n            5: 'yellow-05',\r\n            6: 'pink-06'\r\n        };\r\n\r\n        this.canMove = false;\r\n\r\n        this.mainMatrix = [\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null],\r\n            [null, null, null, null, null, null]\r\n        ];\r\n\r\n        this.generateArray();\r\n\r\n        this.canMove = false;\r\n\r\n        this.activeDonut1 = null;\r\n        this.activeDonut2 = null;\r\n    }\r\n\r\n    generateArray() {\r\n        for (let i = 0; i < this.mainMatrix.length; i++) {\r\n            for (let j = 0; j < this.mainMatrix.length; j++) {\r\n                let donut = this.addDonut(i, j);\r\n\r\n                this.mainMatrix[i][j] = donut;\r\n            }\r\n        }\r\n\r\n        this.time.events.add(600, () => {\r\n            this.checkMatch();\r\n        });\r\n    }\r\n\r\n    addDonut(x, y) {\r\n        let randomIndex = Math.floor(Math.random() * 6 + 1);\r\n\r\n        let donut = this.add.sprite((x * this.donutWidth) + this.donutWidth / 2, 0, this.indexes[randomIndex]);\r\n\r\n        this.add.tween(donut).to({y: (y * this.donutHeight + (this.donutHeight / 2)) + 120}, 600, Phaser.Easing.Linear.In, true);\r\n\r\n        let tempDonut = new Donut(this.donutHeight, this.donutWidth, randomIndex, donut);\r\n\r\n        tempDonut.sprite.anchor.setTo(0.5, 0.5);\r\n\r\n        tempDonut.sprite.inputEnabled = true;\r\n\r\n        tempDonut.sprite.events.onInputDown.add(() => {\r\n            this.donutDown(tempDonut);\r\n        }, this);\r\n\r\n        return tempDonut;\r\n    }\r\n\r\n    donutDown(donut) {\r\n        if (this.canMove) {\r\n            this.activeDonut1 = donut;\r\n\r\n            this.startPosX = (donut.sprite.x - this.donutWidth / 2) / this.donutWidth;\r\n            this.startPosY = (donut.sprite.y - 120 - this.donutWidth / 2) / this.donutWidth;\r\n        }\r\n    }\r\n\r\n\r\n    checkMatch() {\r\n        let combinations = this.getMatches();\r\n\r\n        if (combinations.length > 0) {\r\n            this.time.events.add(300, () => {\r\n                this.destroyDonuts(combinations);\r\n            });\r\n\r\n            this.time.events.add(500, () => {\r\n                this.refreshMainMatrix();\r\n                this.fillMatrixByNewDonuts();\r\n\r\n            });\r\n\r\n            this.time.events.add(600, () => {\r\n                this.activeDonutsReset();\r\n                this.checkMatch();\r\n            });\r\n\r\n\r\n        } else {\r\n            this.swapDonuts();\r\n\r\n            this.game.time.events.add(500, () => {\r\n                this.activeDonutsReset();\r\n\r\n                this.canMove = true;\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    activeDonutsReset() {\r\n        this.activeDonut1 = null;\r\n        this.activeDonut2 = null;\r\n    }\r\n\r\n    getMatches() {\r\n        let combinations = [];\r\n        let groupOf3orMore = [];\r\n\r\n        for (let i = 0; i < this.mainMatrix.length; i++) {\r\n            let tempLine = this.mainMatrix[i];\r\n\r\n            groupOf3orMore = [];\r\n\r\n            for (let j = 0; j < tempLine.length; j++) {\r\n                if (tempLine[j] && tempLine[j + 1] && tempLine[j + 2]) {\r\n\r\n                    if ((tempLine[j].index === tempLine[j + 1].index) && (tempLine[j + 1].index === tempLine[j + 2].index)) {\r\n                        groupOf3orMore.push(tempLine[j], tempLine[j + 1], tempLine[j + 2]);\r\n\r\n                        let tempIndex = tempLine[j].index;\r\n\r\n                        j += 2;\r\n\r\n                        if ((j === tempLine.length - 1) && (groupOf3orMore.length)) {\r\n                            combinations.push(groupOf3orMore);\r\n\r\n                            groupOf3orMore = [];\r\n\r\n                        } else {\r\n                            for (let nextDonut = j + 1; nextDonut < tempLine.length; nextDonut++) {\r\n\r\n                                if (tempIndex === tempLine[nextDonut].index) {\r\n                                    groupOf3orMore.push(tempLine[nextDonut]);\r\n\r\n                                    j += 1;\r\n                                } else {\r\n                                    combinations.push(groupOf3orMore);\r\n\r\n                                    groupOf3orMore = [];\r\n\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (groupOf3orMore.length) {\r\n                                combinations.push(groupOf3orMore);\r\n                                groupOf3orMore = [];\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.mainMatrix.length; i++) {\r\n            let tempRaw = this.mainMatrix.map((value) => {\r\n                return value[i];\r\n            });\r\n\r\n            groupOf3orMore = [];\r\n\r\n            for (let j = 0; j < tempRaw.length; j++) {\r\n                if (tempRaw[j] && tempRaw[j + 1] && tempRaw[j + 2]) {\r\n\r\n                    if ((tempRaw[j].index === tempRaw[j + 1].index) && (tempRaw[j + 1].index === tempRaw[j + 2].index)) {\r\n                        groupOf3orMore.push(tempRaw[j], tempRaw[j + 1], tempRaw[j + 2]);\r\n\r\n                        let tempIndex = tempRaw[j].index;\r\n\r\n                        j += 2;\r\n\r\n                        if ((j === tempRaw.length - 1) && (groupOf3orMore.length)) {\r\n                            combinations.push(groupOf3orMore);\r\n\r\n                            groupOf3orMore = [];\r\n                        } else {\r\n                            for (let nextDonut = j + 1; nextDonut < tempRaw.length; nextDonut++) {\r\n                                if (tempIndex === tempRaw[nextDonut].index) {\r\n                                    groupOf3orMore.push(tempRaw[nextDonut]);\r\n\r\n                                    j += 1;\r\n                                } else {\r\n                                    combinations.push(groupOf3orMore);\r\n\r\n                                    groupOf3orMore = [];\r\n\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (groupOf3orMore.length) {\r\n                                combinations.push(groupOf3orMore);\r\n\r\n                                groupOf3orMore = [];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return combinations;\r\n    }\r\n\r\n    update() {\r\n        if (this.activeDonut1 && !this.activeDonut2) {\r\n            let hoverX = this.input.x;\r\n            let hoverY = this.input.y - 120;\r\n\r\n            let hoverPosX = Math.floor(hoverX / this.donutWidth);\r\n            let hoverPosY = Math.floor(hoverY / this.donutHeight);\r\n\r\n            let difX = (hoverPosX - this.startPosX);\r\n            let difY = (hoverPosY - this.startPosY);\r\n\r\n            if (!(hoverPosY > this.mainMatrix[0].length - 1 || hoverPosY < 0) && !(hoverPosX > this.mainMatrix.length - 1 || hoverPosX < 0)) {\r\n\r\n                if ((Math.abs(difY) === 1 && difX === 0) || (Math.abs(difX) === 1 && difY === 0)) {\r\n\r\n                    this.canMove = false;\r\n\r\n                    this.activeDonut2 = this.mainMatrix[hoverPosX][hoverPosY];\r\n\r\n                    this.swapDonuts();\r\n\r\n                    this.time.events.add(500, () => {\r\n                        this.checkMatch();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.timeExpired > this.timeToPlay) {\r\n            this.state.start('gameOverState');\r\n        }\r\n    }\r\n\r\n    swapDonuts() {\r\n        if (this.activeDonut1 && this.activeDonut2) {\r\n            let donut1Pos = {\r\n                x: (this.activeDonut1.sprite.x - this.donutWidth / 2) / this.donutWidth,\r\n                y: (this.activeDonut1.sprite.y - 120 - this.donutWidth / 2) / this.donutWidth\r\n            };\r\n            let donut2Pos = {\r\n                x: (this.activeDonut2.sprite.x - this.donutWidth / 2) / this.donutWidth,\r\n                y: (this.activeDonut2.sprite.y - 120 - this.donutWidth / 2) / this.donutWidth\r\n            };\r\n\r\n            if (!window['music'].mute) {\r\n                this.selectSound.play();\r\n            }\r\n\r\n            this.mainMatrix[donut1Pos.x][donut1Pos.y] = this.activeDonut2;\r\n            this.mainMatrix[donut2Pos.x][donut2Pos.y] = this.activeDonut1;\r\n\r\n            this.add.tween(this.activeDonut1.sprite).to({\r\n                x: donut2Pos.x * this.donutWidth + (this.donutWidth / 2),\r\n                y: (donut2Pos.y * this.donutHeight + (this.donutHeight / 2)) + 120\r\n            }, 200, Phaser.Easing.Linear.In, true);\r\n\r\n            this.add.tween(this.activeDonut2.sprite).to({\r\n                x: donut1Pos.x * this.donutWidth + (this.donutWidth / 2),\r\n                y: (donut1Pos.y * this.donutHeight + (this.donutHeight / 2)) + 120\r\n            }, 200, Phaser.Easing.Linear.In, true);\r\n        }\r\n    }\r\n\r\n\r\n    destroyDonuts(matches) {\r\n        for (let i = 0; i < matches.length; i++) {\r\n            for (let j = 0; j < matches[i].length; j++) {\r\n                window['score'] += 10;\r\n                this.scoreText.text = window['score'];\r\n\r\n                if (!window['music'].mute) {\r\n                    this.destroySound.play();\r\n                }\r\n\r\n                let donut = matches[i][j];\r\n\r\n                let donutPos = this.getDonutsPos(donut);\r\n\r\n                matches[i][j].sprite.destroy();\r\n                if (donutPos.i !== -1 && donutPos.j !== -1) {\r\n                    this.mainMatrix[donutPos.i][donutPos.j] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getDonutsPos(donut) {\r\n        let position = {\r\n            i: -1,\r\n            j: -1\r\n        };\r\n\r\n        for (let i = 0; i < this.mainMatrix.length; i++) {\r\n            for (let j = 0; j < this.mainMatrix[i].length; j++) {\r\n                if (donut === this.mainMatrix[i][j]) {\r\n                    position.i = i;\r\n                    position.j = j;\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return position;\r\n    }\r\n\r\n    refreshMainMatrix() {\r\n        for (let i = 0; i < this.mainMatrix.length; i++) {\r\n            for (let j = this.mainMatrix[i].length - 1; j > 0; j--) {\r\n                if (this.mainMatrix[i][j] == null && this.mainMatrix[i][j - 1] !== null) {\r\n                    let tempDonut = new Donut(this.donutHeight, this.donutWidth, this.mainMatrix[i][j - 1].index, this.mainMatrix[i][j - 1].sprite);\r\n\r\n                    this.mainMatrix[i][j] = tempDonut;\r\n                    this.mainMatrix[i][j - 1] = null;\r\n\r\n                    this.add.tween(tempDonut.sprite).to({y: ((this.donutHeight * j) + (this.donutHeight / 2)) + 120}, 200, Phaser.Easing.Linear.In, true);\r\n\r\n                    j = this.mainMatrix[i].length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fillMatrixByNewDonuts() {\r\n        for (let i = 0; i < this.mainMatrix.length; i++) {\r\n            for (let j = 0; j < this.mainMatrix.length; j++) {\r\n                if (!this.mainMatrix[i][j]) {\r\n                    this.mainMatrix[i][j] = this.addDonut(i, j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default PlayState;\r\n",
    "class Preloader extends Phaser.State {\r\n    preload() {\r\n        this.load.audio('backgroundMusic', '../assets/audio/background.mp3');\r\n        this.load.audio('destroyDonutsSound', '../assets/audio/kill.mp3');\r\n        this.load.audio('swapSound', '../assets/audio/select-1.mp3');\r\n        this.load.image('backgroundImage', '../assets/images/backgrounds/background.jpg');\r\n        this.load.image('donut', '../assets/images/donut.png');\r\n        this.load.image('donutShadow', '../assets/images/big-shadow.png');\r\n        this.load.image('soundButton', '../assets/images/btn-sfx.png');\r\n        this.load.image('donutsLogo', '../assets/images/donuts_logo.png');\r\n        this.load.image('playBtn', '../assets/images/btn-play.png');\r\n        this.load.image('cursor', '../assets/images/game/hand.png');\r\n        this.load.image('howToPlayBtn', '../assets/images/btn-howToPlay.png');\r\n        this.load.image('scoreTable', '../assets/images/bg-score.png');\r\n        this.load.image('timeUp', '../assets/images/text-timeup.png');\r\n        this.load.images(\r\n            ['red-01', 'blue-02', 'green-03', 'lightBlue-04', 'yellow-05', 'pink-06'],\r\n            [\r\n                '../assets/images/game/gem-01.png', '../assets/images/game/gem-02.png', '../assets/images/game/gem-03.png',\r\n                '../assets/images/game/gem-04.png', '../assets/images/game/gem-05.png', '../assets/images/game/gem-06.png'\r\n            ]\r\n        );\r\n        this.load.image('returnButton', '../assets/images/btn-return.png');\r\n        this.load.image('donutRed', '../assets/images/game/gem-01.png');\r\n        this.load.image('donutBlue', '../assets/images/game/gem-02.png');\r\n        this.load.image('returnToMainMenu', '../assets/images/btn-mainMenu.png');\r\n    }\r\n\r\n    create() {\r\n        //creates music for whole game\r\n        window['music'] = this.add.audio('backgroundMusic');\r\n        window['music'].loop = true;\r\n\r\n        window['music'].play();\r\n\r\n        this.state.start('mainMenu');\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n",
    "import {createCustomButton} from '../objects/createCustomButton';\r\nimport {checkMusic} from \"../objects/chechMusic\";\r\n\r\nclass TutorialState extends Phaser.State {\r\n    create() {\r\n        this.add.sprite(0, 0, 'backgroundImage');\r\n\r\n        let soundButton = createCustomButton(this, 10, 10, 'soundButton', 80, 80, () => {\r\n            if (window['music'].mute) {\r\n                window['music'].mute = false;\r\n\r\n                soundButton.tint = 0xFFFFFF;\r\n            } else {\r\n                window['music'].mute = true;\r\n\r\n                soundButton.tint = 0xff0000;\r\n            }\r\n        });\r\n\r\n        checkMusic(soundButton);\r\n\r\n        let returnBtn = createCustomButton(this, this.world.centerX + 110, this.world.centerY + 350, 'returnButton', 230, 150, () => {\r\n            this.state.start('mainMenu');\r\n        });\r\n\r\n        returnBtn.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        let tutorialText1 = this.add.text(\r\n            this.world.centerX + 300, this.world.centerY - 80,\r\n            '          How to play \\nYou have to make a horizontal or vertical line of 3 or more same donuts',\r\n            {fontSize: '48px', fill: 'violet', font: \"Fredoka One\", wordWrap: true, wordWrapWidth: 650}\r\n        );\r\n\r\n        tutorialText1.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n\r\n        this.add.sprite(this.world.centerX - 295, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 215, this.world.centerY - 90, 'donutRed');\r\n        this.add.sprite(this.world.centerX - 135, this.world.centerY - 90, 'donutRed');\r\n\r\n        this.add.sprite(this.world.centerX + 30, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 110, this.world.centerY - 90, 'donutBlue');\r\n        this.add.sprite(this.world.centerX + 190, this.world.centerY - 90, 'donutBlue');\r\n\r\n        let tutorialText2 = this.add.text(\r\n            this.world.centerX + 270, this.world.centerY + 208,\r\n            'You have 30 seconds so get as much score as you can.',\r\n            {font: \"50px Fredoka One\", fill: 'violet', wordWrap: true, wordWrapWidth: 600}\r\n        );\r\n\r\n        tutorialText2.anchor = {\r\n            x: 1,\r\n            y: 1\r\n        };\r\n    }\r\n}\r\n    export default TutorialState;\r\n"
  ]
}